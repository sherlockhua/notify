// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swagger Petstore - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.11
 * Contact: apiteam@swagger.io
 */

package openapi

import (
	"github.com/gin-gonic/gin"
	"time"
	"github.com/sherlockhua/koala/logs"
	"net/http"
	"strings"
)


// TaskAPIController binds http requests to an api service and writes the service results to the http response
type TaskAPIController struct {
	service TaskAPIServicer
	errorHandler ErrorHandler
}

// TaskAPIOption for how the controller is set up.
type TaskAPIOption func(*TaskAPIController)

// WithTaskAPIErrorHandler inject ErrorHandler into controller
func WithTaskAPIErrorHandler(h ErrorHandler) TaskAPIOption {
	return func(c *TaskAPIController) {
		c.errorHandler = h
	}
}

// NewTaskAPIController creates a default api controller
func NewTaskAPIController(s TaskAPIServicer, opts ...TaskAPIOption) *TaskAPIController {
	controller := &TaskAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TaskAPIController
func (c *TaskAPIController) Routes() Routes {
	return Routes{
		"GetTask": Route{
			strings.ToUpper("Get"),
			"/api/v3/task",
			c.GetTask,
		},
		"UpdateTask": Route{
			strings.ToUpper("Put"),
			"/api/v3/task",
			c.UpdateTask,
		},
		"CreateTask": Route{
			strings.ToUpper("Post"),
			"/api/v3/task",
			c.CreateTask,
		},
		"DeleteTask": Route{
			strings.ToUpper("Delete"),
			"/api/v3/task",
			c.DeleteTask,
		},
		"GetTaskList": Route{
			strings.ToUpper("Get"),
			"/api/v3/task/list",
			c.GetTaskList,
		},
	}
}

// GetTask - 获取任务
func (c *TaskAPIController) GetTask(ctx *gin.Context) {
	var (
		errCall error
		codeCall int 
		resultCall interface{}
		startTime = time.Now()
		logger logs.Logger
	)
	defer func() {
		logger.WithFields(logs.Fields{
			"code": codeCall,
			"errCall": errCall,
			"response": resultCall,
			"cost": time.Since(startTime).Milliseconds(),
		}).Accessf(ctx.Request.Context(), "process")
	}()


	query := ctx.Request.URL.Query()
	var taskIdParam string
	if query.Has("taskId") {
		param := query.Get("taskId")

		taskIdParam = param
	} else {
		c.errorHandler(ctx, &RequiredError{Field: "taskId"})
		return
	}
	logger = logs.WithFields(logs.Fields{
	"method": "GetTask",
	"taskId":taskIdParam, 
	})
	resultCall, codeCall,errCall = c.service.GetTask(ctx.Request.Context(), taskIdParam)
	
	// If an error occurred, encode the error with the status code
	if errCall != nil {
		c.errorHandler(ctx, errCall)
		return
	}
	
	ctx.JSON(http.StatusOK, resultCall)

	// If no error, encode the body and the result code
	
}

// UpdateTask - 更新任务
func (c *TaskAPIController) UpdateTask(ctx *gin.Context) {
	var (
		errCall error
		codeCall int 
		resultCall interface{}
		startTime = time.Now()
		logger logs.Logger
	)
	defer func() {
		logger.WithFields(logs.Fields{
			"code": codeCall,
			"errCall": errCall,
			"response": resultCall,
			"cost": time.Since(startTime).Milliseconds(),
		}).Accessf(ctx.Request.Context(), "process")
	}()


	taskParam := Task{}
	if err := ctx.ShouldBindJSON(&taskParam); err!= nil {
            c.errorHandler(ctx, &ParsingError{Err: err})
            return
    }

	if err := AssertTaskRequired(taskParam); err != nil {
		c.errorHandler(ctx, err)
		return
	}
	if err := AssertTaskConstraints(taskParam); err != nil {
		c.errorHandler(ctx, err)
		return
	}
	logger = logs.WithFields(logs.Fields{
	"method": "UpdateTask",
	"task":taskParam, 
	})
	resultCall, codeCall,errCall = c.service.UpdateTask(ctx.Request.Context(), taskParam)
	
	// If an error occurred, encode the error with the status code
	if errCall != nil {
		c.errorHandler(ctx, errCall)
		return
	}
	
	ctx.JSON(http.StatusOK, resultCall)

	// If no error, encode the body and the result code
	
}

// CreateTask - 创建任务
func (c *TaskAPIController) CreateTask(ctx *gin.Context) {
	var (
		errCall error
		codeCall int 
		resultCall interface{}
		startTime = time.Now()
		logger logs.Logger
	)
	defer func() {
		logger.WithFields(logs.Fields{
			"code": codeCall,
			"errCall": errCall,
			"response": resultCall,
			"cost": time.Since(startTime).Milliseconds(),
		}).Accessf(ctx.Request.Context(), "process")
	}()


	taskParam := Task{}
	if err := ctx.ShouldBindJSON(&taskParam); err!= nil {
            c.errorHandler(ctx, &ParsingError{Err: err})
            return
    }

	if err := AssertTaskRequired(taskParam); err != nil {
		c.errorHandler(ctx, err)
		return
	}
	if err := AssertTaskConstraints(taskParam); err != nil {
		c.errorHandler(ctx, err)
		return
	}
	logger = logs.WithFields(logs.Fields{
	"method": "CreateTask",
	"task":taskParam, 
	})
	resultCall, codeCall,errCall = c.service.CreateTask(ctx.Request.Context(), taskParam)
	
	// If an error occurred, encode the error with the status code
	if errCall != nil {
		c.errorHandler(ctx, errCall)
		return
	}
	
	ctx.JSON(http.StatusOK, resultCall)

	// If no error, encode the body and the result code
	
}

// DeleteTask - 获取任务
func (c *TaskAPIController) DeleteTask(ctx *gin.Context) {
	var (
		errCall error
		codeCall int 
		resultCall interface{}
		startTime = time.Now()
		logger logs.Logger
	)
	defer func() {
		logger.WithFields(logs.Fields{
			"code": codeCall,
			"errCall": errCall,
			"response": resultCall,
			"cost": time.Since(startTime).Milliseconds(),
		}).Accessf(ctx.Request.Context(), "process")
	}()


	query := ctx.Request.URL.Query()
	var taskIdParam string
	if query.Has("taskId") {
		param := query.Get("taskId")

		taskIdParam = param
	} else {
		c.errorHandler(ctx, &RequiredError{Field: "taskId"})
		return
	}
	logger = logs.WithFields(logs.Fields{
	"method": "DeleteTask",
	"taskId":taskIdParam, 
	})
	resultCall, codeCall,errCall = c.service.DeleteTask(ctx.Request.Context(), taskIdParam)
	
	// If an error occurred, encode the error with the status code
	if errCall != nil {
		c.errorHandler(ctx, errCall)
		return
	}
	
	ctx.JSON(http.StatusOK, resultCall)

	// If no error, encode the body and the result code
	
}

// GetTaskList - get all task list
func (c *TaskAPIController) GetTaskList(ctx *gin.Context) {
	var (
		errCall error
		codeCall int 
		resultCall interface{}
		startTime = time.Now()
		logger logs.Logger
	)
	defer func() {
		logger.WithFields(logs.Fields{
			"code": codeCall,
			"errCall": errCall,
			"response": resultCall,
			"cost": time.Since(startTime).Milliseconds(),
		}).Accessf(ctx.Request.Context(), "process")
	}()


	query := ctx.Request.URL.Query()
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(ctx, &ParsingError{Param: "offset", Err: err})
			return
		}

		offsetParam = param
	} else {
		var param int32 = 0
		offsetParam = param
	}
	var sizeParam int32
	if query.Has("size") {
		param, err := parseNumericParameter[int32](
			query.Get("size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(ctx, &ParsingError{Param: "size", Err: err})
			return
		}

		sizeParam = param
	} else {
		var param int32 = 10
		sizeParam = param
	}
	logger = logs.WithFields(logs.Fields{
	"method": "GetTaskList",
	"offset":offsetParam, "size":sizeParam, 
	})
	resultCall, codeCall,errCall = c.service.GetTaskList(ctx.Request.Context(), offsetParam, sizeParam)
	
	// If an error occurred, encode the error with the status code
	if errCall != nil {
		c.errorHandler(ctx, errCall)
		return
	}
	
	ctx.JSON(http.StatusOK, resultCall)

	// If no error, encode the body and the result code
	
}
